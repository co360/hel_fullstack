{"ast":null,"code":"import { equal } from '@wry/equality';\nimport { graphQLResultHasError } from '../utilities/common/errorHandling.js';\nimport { isNonEmptyArray } from '../utilities/common/arrays.js';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus.js';\n\nvar QueryInfo = function () {\n  function QueryInfo(cache) {\n    this.cache = cache;\n    this.listeners = new Set();\n    this.document = null;\n    this.lastRequestId = 1;\n    this.observableQuery = null;\n    this.subscriptions = new Set();\n    this.dirty = false;\n    this.diff = null;\n  }\n\n  QueryInfo.prototype.init = function (query) {\n    var networkStatus;\n\n    if (this.variables && this.networkStatus !== NetworkStatus.loading && !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    } else if (query.isPoll) {\n      networkStatus = NetworkStatus.poll;\n    } else if (query.isRefetch) {\n      networkStatus = NetworkStatus.refetch;\n    } else {\n      networkStatus = NetworkStatus.loading;\n    }\n\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this && this.graphQLErrors || [],\n      networkStatus: networkStatus\n    });\n\n    if (query.observableQuery) {\n      this.observableQuery = query.observableQuery;\n    }\n\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n\n    return this;\n  };\n\n  QueryInfo.prototype.setDirty = function () {\n    var _this = this;\n\n    if (!this.dirty) {\n      this.dirty = true;\n\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(function () {\n          return _this.notify();\n        }, 0);\n      }\n    }\n\n    return this;\n  };\n\n  QueryInfo.prototype.setDiff = function (diff) {\n    var _a, _b;\n\n    var oldDiff = this.diff;\n    this.diff = diff;\n\n    if (!this.dirty && ((_a = diff) === null || _a === void 0 ? void 0 : _a.result) !== ((_b = oldDiff) === null || _b === void 0 ? void 0 : _b.result)) {\n      this.setDirty();\n    }\n  };\n\n  QueryInfo.prototype.getDiff = function () {\n    if (!this.diff) {\n      var oq = this.observableQuery;\n      var lastResult = oq && oq.getLastResult();\n      var lastError = oq && oq.getLastError();\n      var fetchPolicy = oq && oq.options.fetchPolicy || \"cache-first\";\n      var errorPolicy = this.getErrorPolicy();\n      var errorStatusChanged = errorPolicy !== 'none' && (lastError && lastError.graphQLErrors) !== this.graphQLErrors;\n\n      if (lastResult && lastResult.data && !errorStatusChanged) {\n        this.diff = {\n          result: lastResult.data,\n          complete: true\n        };\n      } else if (fetchPolicy !== \"no-cache\" && fetchPolicy !== \"network-only\") {\n        this.diff = this.cache.diff({\n          query: this.document,\n          variables: this.variables,\n          returnPartialData: true,\n          optimistic: true\n        });\n      }\n    }\n\n    return this.diff;\n  };\n\n  QueryInfo.prototype.getErrorPolicy = function () {\n    var oq = this.observableQuery;\n    return oq && oq.options.errorPolicy || \"none\";\n  };\n\n  QueryInfo.prototype.notify = function () {\n    var _this = this;\n\n    if (this.notifyTimeout) {\n      clearTimeout(this.notifyTimeout);\n      this.notifyTimeout = void 0;\n    }\n\n    if (this.shouldNotify() && this.getDiff()) {\n      this.listeners.forEach(function (listener) {\n        return listener(_this);\n      });\n    }\n\n    this.dirty = false;\n  };\n\n  QueryInfo.prototype.shouldNotify = function () {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n\n    if (!this.observableQuery) {\n      return true;\n    }\n\n    var _a = this.observableQuery.options,\n        fetchPolicy = _a.fetchPolicy,\n        returnPartialData = _a.returnPartialData,\n        notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n\n    if (fetchPolicy === \"standby\") {\n      return false;\n    }\n\n    if (isNetworkRequestInFlight(this.networkStatus)) {\n      var lastResult = this.observableQuery.getLastResult();\n      var networkStatusChanged = !!(lastResult && lastResult.networkStatus !== this.networkStatus);\n      var shouldNotifyIfLoading = returnPartialData || this.networkStatus === NetworkStatus.setVariables || networkStatusChanged && notifyOnNetworkStatusChange || fetchPolicy === 'cache-only' || fetchPolicy === 'cache-and-network';\n\n      if (!shouldNotifyIfLoading) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  QueryInfo.prototype.stop = function () {\n    this.cancel();\n    delete this.cancel;\n    this.variables = this.networkStatus = this.networkError = this.graphQLErrors = void 0;\n  };\n\n  QueryInfo.prototype.cancel = function () {};\n\n  QueryInfo.prototype.updateWatch = function (options) {\n    var _this = this;\n\n    this.cancel();\n\n    var previousResult = function () {\n      var previousResult = null;\n      var observableQuery = _this.observableQuery;\n\n      if (observableQuery) {\n        var lastResult = observableQuery.getLastResult();\n\n        if (lastResult) {\n          previousResult = lastResult.data;\n        }\n      }\n\n      return previousResult;\n    };\n\n    this.cancel = this.cache.watch({\n      query: this.document,\n      variables: options.variables,\n      optimistic: true,\n      previousResult: previousResult,\n      callback: function (diff) {\n        _this.setDiff(diff);\n      }\n    });\n    return this;\n  };\n\n  QueryInfo.prototype.markResult = function (result, _a, allowCacheWrite, makeReady) {\n    var fetchPolicy = _a.fetchPolicy,\n        variables = _a.variables,\n        errorPolicy = _a.errorPolicy;\n\n    if (fetchPolicy === 'no-cache') {\n      this.setDiff({\n        result: result.data,\n        complete: true\n      });\n    } else if (allowCacheWrite) {\n      var ignoreErrors = errorPolicy === 'ignore' || errorPolicy === 'all';\n      var writeWithErrors = !graphQLResultHasError(result);\n\n      if (!writeWithErrors && ignoreErrors && result.data) {\n        writeWithErrors = true;\n      }\n\n      if (writeWithErrors) {\n        this.cache.write({\n          result: result.data,\n          dataId: 'ROOT_QUERY',\n          query: this.document,\n          variables: variables\n        });\n      }\n    }\n\n    if (makeReady) {\n      this.networkError = null;\n      this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n      this.networkStatus = NetworkStatus.ready;\n    }\n  };\n\n  QueryInfo.prototype.markError = function (error) {\n    this.networkError = error;\n    this.networkStatus = NetworkStatus.error;\n  };\n\n  return QueryInfo;\n}();\n\nexport { QueryInfo };","map":{"version":3,"sources":["QueryInfo.js"],"names":[],"mappings":"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","sourcesContent":["import { equal } from \"@wry/equality\";\nimport { isNonEmptyArray } from '../utilities/common/arrays';\nimport { graphQLResultHasError } from '../utilities/common/errorHandling';\nimport { NetworkStatus, isNetworkRequestInFlight, } from './networkStatus';\nvar QueryInfo = (function () {\n    function QueryInfo(cache) {\n        this.cache = cache;\n        this.listeners = new Set();\n        this.document = null;\n        this.lastRequestId = 1;\n        this.observableQuery = null;\n        this.subscriptions = new Set();\n        this.dirty = false;\n        this.diff = null;\n    }\n    QueryInfo.prototype.init = function (query) {\n        var networkStatus;\n        if (this.variables &&\n            this.networkStatus !== NetworkStatus.loading &&\n            !equal(this.variables, query.variables)) {\n            networkStatus = NetworkStatus.setVariables;\n        }\n        else if (query.isPoll) {\n            networkStatus = NetworkStatus.poll;\n        }\n        else if (query.isRefetch) {\n            networkStatus = NetworkStatus.refetch;\n        }\n        else {\n            networkStatus = NetworkStatus.loading;\n        }\n        Object.assign(this, {\n            document: query.document,\n            variables: query.variables,\n            networkError: null,\n            graphQLErrors: this && this.graphQLErrors || [],\n            networkStatus: networkStatus,\n        });\n        if (query.observableQuery) {\n            this.observableQuery = query.observableQuery;\n        }\n        if (query.lastRequestId) {\n            this.lastRequestId = query.lastRequestId;\n        }\n        return this;\n    };\n    QueryInfo.prototype.setDirty = function () {\n        var _this = this;\n        if (!this.dirty) {\n            this.dirty = true;\n            if (!this.notifyTimeout) {\n                this.notifyTimeout = setTimeout(function () { return _this.notify(); }, 0);\n            }\n        }\n        return this;\n    };\n    QueryInfo.prototype.setDiff = function (diff) {\n        var _a, _b;\n        var oldDiff = this.diff;\n        this.diff = diff;\n        if (!this.dirty && ((_a = diff) === null || _a === void 0 ? void 0 : _a.result) !== ((_b = oldDiff) === null || _b === void 0 ? void 0 : _b.result)) {\n            this.setDirty();\n        }\n    };\n    QueryInfo.prototype.getDiff = function () {\n        if (!this.diff) {\n            var oq = this.observableQuery;\n            var lastResult = oq && oq.getLastResult();\n            var lastError = oq && oq.getLastError();\n            var fetchPolicy = oq && oq.options.fetchPolicy || \"cache-first\";\n            var errorPolicy = this.getErrorPolicy();\n            var errorStatusChanged = errorPolicy !== 'none' &&\n                (lastError && lastError.graphQLErrors) !== this.graphQLErrors;\n            if (lastResult && lastResult.data && !errorStatusChanged) {\n                this.diff = {\n                    result: lastResult.data,\n                    complete: true,\n                };\n            }\n            else if (fetchPolicy !== \"no-cache\" &&\n                fetchPolicy !== \"network-only\") {\n                this.diff = this.cache.diff({\n                    query: this.document,\n                    variables: this.variables,\n                    returnPartialData: true,\n                    optimistic: true,\n                });\n            }\n        }\n        return this.diff;\n    };\n    QueryInfo.prototype.getErrorPolicy = function () {\n        var oq = this.observableQuery;\n        return oq && oq.options.errorPolicy || \"none\";\n    };\n    QueryInfo.prototype.notify = function () {\n        var _this = this;\n        if (this.notifyTimeout) {\n            clearTimeout(this.notifyTimeout);\n            this.notifyTimeout = void 0;\n        }\n        if (this.shouldNotify() && this.getDiff()) {\n            this.listeners.forEach(function (listener) { return listener(_this); });\n        }\n        this.dirty = false;\n    };\n    QueryInfo.prototype.shouldNotify = function () {\n        if (!this.dirty || !this.listeners.size) {\n            return false;\n        }\n        if (!this.observableQuery) {\n            return true;\n        }\n        var _a = this.observableQuery.options, fetchPolicy = _a.fetchPolicy, returnPartialData = _a.returnPartialData, notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n        if (fetchPolicy === \"standby\") {\n            return false;\n        }\n        if (isNetworkRequestInFlight(this.networkStatus)) {\n            var lastResult = this.observableQuery.getLastResult();\n            var networkStatusChanged = !!(lastResult &&\n                lastResult.networkStatus !== this.networkStatus);\n            var shouldNotifyIfLoading = returnPartialData ||\n                this.networkStatus === NetworkStatus.setVariables ||\n                (networkStatusChanged && notifyOnNetworkStatusChange) ||\n                fetchPolicy === 'cache-only' ||\n                fetchPolicy === 'cache-and-network';\n            if (!shouldNotifyIfLoading) {\n                return false;\n            }\n        }\n        return true;\n    };\n    QueryInfo.prototype.stop = function () {\n        this.cancel();\n        delete this.cancel;\n        this.variables =\n            this.networkStatus =\n                this.networkError =\n                    this.graphQLErrors = void 0;\n    };\n    QueryInfo.prototype.cancel = function () { };\n    QueryInfo.prototype.updateWatch = function (options) {\n        var _this = this;\n        this.cancel();\n        var previousResult = function () {\n            var previousResult = null;\n            var observableQuery = _this.observableQuery;\n            if (observableQuery) {\n                var lastResult = observableQuery.getLastResult();\n                if (lastResult) {\n                    previousResult = lastResult.data;\n                }\n            }\n            return previousResult;\n        };\n        this.cancel = this.cache.watch({\n            query: this.document,\n            variables: options.variables,\n            optimistic: true,\n            previousResult: previousResult,\n            callback: function (diff) {\n                _this.setDiff(diff);\n            },\n        });\n        return this;\n    };\n    QueryInfo.prototype.markResult = function (result, _a, allowCacheWrite, makeReady) {\n        var fetchPolicy = _a.fetchPolicy, variables = _a.variables, errorPolicy = _a.errorPolicy;\n        if (fetchPolicy === 'no-cache') {\n            this.setDiff({ result: result.data, complete: true });\n        }\n        else if (allowCacheWrite) {\n            var ignoreErrors = errorPolicy === 'ignore' || errorPolicy === 'all';\n            var writeWithErrors = !graphQLResultHasError(result);\n            if (!writeWithErrors && ignoreErrors && result.data) {\n                writeWithErrors = true;\n            }\n            if (writeWithErrors) {\n                this.cache.write({\n                    result: result.data,\n                    dataId: 'ROOT_QUERY',\n                    query: this.document,\n                    variables: variables,\n                });\n            }\n        }\n        if (makeReady) {\n            this.networkError = null;\n            this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n            this.networkStatus = NetworkStatus.ready;\n        }\n    };\n    QueryInfo.prototype.markError = function (error) {\n        this.networkError = error;\n        this.networkStatus = NetworkStatus.error;\n    };\n    return QueryInfo;\n}());\nexport { QueryInfo };\n//# sourceMappingURL=QueryInfo.js.map"]},"metadata":{},"sourceType":"module"}