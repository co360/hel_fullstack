{"ast":null,"code":"import { __awaiter, __generator, __assign } from 'tslib';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport Observable from 'zen-observable';\nimport 'symbol-observable';\nimport { getDefaultValues, getOperationDefinition, getOperationName } from '../utilities/graphql/getFromAST.js';\nimport { execute } from '../link/core/execute.js';\nimport equal from '@wry/equality';\nimport { hasDirectives, hasClientExports } from '../utilities/graphql/directives.js';\nimport { graphQLResultHasError, tryFunctionOrLogError } from '../utilities/common/errorHandling.js';\nimport { removeConnectionDirectiveFromDocument } from '../utilities/graphql/transform.js';\nimport { canUseWeakMap } from '../utilities/common/canUse.js';\nimport { isNonEmptyArray } from '../utilities/common/arrays.js';\nimport { ApolloError, isApolloError } from '../errors/ApolloError.js';\nimport { MutationStore } from '../data/mutations.js';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus.js';\nimport { FetchType } from './types.js';\nimport { ObservableQuery } from './ObservableQuery.js';\nimport { LocalState } from './LocalState.js';\nimport { multiplex, asyncMap } from '../utilities/observables/observables.js';\nimport { QueryInfo } from './QueryInfo.js';\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar QueryManager = function () {\n  function QueryManager(_a) {\n    var cache = _a.cache,\n        link = _a.link,\n        _b = _a.queryDeduplication,\n        queryDeduplication = _b === void 0 ? false : _b,\n        _c = _a.onBroadcast,\n        onBroadcast = _c === void 0 ? function () {\n      return undefined;\n    } : _c,\n        _d = _a.ssrMode,\n        ssrMode = _d === void 0 ? false : _d,\n        _e = _a.clientAwareness,\n        clientAwareness = _e === void 0 ? {} : _e,\n        localState = _a.localState,\n        assumeImmutableResults = _a.assumeImmutableResults;\n    this.mutationStore = new MutationStore();\n    this.clientAwareness = {};\n    this.idCounter = 1;\n    this.queries = new Map();\n    this.fetchQueryRejectFns = new Map();\n    this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n    this.inFlightLinkObservables = new Map();\n    this.pollingInfoByQueryId = new Map();\n    this.cache = cache;\n    this.link = link;\n    this.queryDeduplication = queryDeduplication;\n    this.onBroadcast = onBroadcast;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({\n      cache: cache\n    });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n  }\n\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.fetchQueryRejectFns.forEach(function (reject) {\n      reject(process.env.NODE_ENV === \"production\" ? new InvariantError(14) : new InvariantError('QueryManager stopped while query was in flight'));\n    });\n  };\n\n  QueryManager.prototype.mutate = function (_a) {\n    var mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        updateQueriesByName = _a.updateQueries,\n        _b = _a.refetchQueries,\n        refetchQueries = _b === void 0 ? [] : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        updateWithProxyFn = _a.update,\n        _d = _a.errorPolicy,\n        errorPolicy = _d === void 0 ? 'none' : _d,\n        fetchPolicy = _a.fetchPolicy,\n        _e = _a.context,\n        context = _e === void 0 ? {} : _e;\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationId, generateUpdateQueriesInfo, optimistic_1, self;\n\n      var _this = this;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            process.env.NODE_ENV === \"production\" ? invariant(mutation, 15) : invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n            process.env.NODE_ENV === \"production\" ? invariant(!fetchPolicy || fetchPolicy === 'no-cache', 16) : invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.\");\n            mutationId = this.generateQueryId();\n            mutation = this.transform(mutation).document;\n            variables = this.getVariables(mutation, variables);\n            if (!this.transform(mutation).hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(mutation, variables, context)];\n\n          case 1:\n            variables = _f.sent();\n            _f.label = 2;\n\n          case 2:\n            generateUpdateQueriesInfo = function () {\n              var ret = {};\n\n              if (updateQueriesByName) {\n                _this.queries.forEach(function (_a, queryId) {\n                  var observableQuery = _a.observableQuery;\n\n                  if (observableQuery && observableQuery.watching) {\n                    var queryName = observableQuery.queryName;\n\n                    if (queryName && hasOwnProperty.call(updateQueriesByName, queryName)) {\n                      ret[queryId] = {\n                        updater: updateQueriesByName[queryName],\n                        queryInfo: _this.queries.get(queryId)\n                      };\n                    }\n                  }\n                });\n              }\n\n              return ret;\n            };\n\n            this.mutationStore.initMutation(mutationId, mutation, variables);\n\n            if (optimisticResponse) {\n              optimistic_1 = typeof optimisticResponse === 'function' ? optimisticResponse(variables) : optimisticResponse;\n              this.cache.recordOptimisticTransaction(function (cache) {\n                markMutationResult({\n                  mutationId: mutationId,\n                  result: {\n                    data: optimistic_1\n                  },\n                  document: mutation,\n                  variables: variables,\n                  queryUpdatersById: generateUpdateQueriesInfo(),\n                  update: updateWithProxyFn\n                }, cache);\n              }, mutationId);\n            }\n\n            this.broadcastQueries();\n            self = this;\n            return [2, new Promise(function (resolve, reject) {\n              var storeResult;\n              var error;\n              self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: optimisticResponse\n              }), variables, false).subscribe({\n                next: function (result) {\n                  if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                    error = new ApolloError({\n                      graphQLErrors: result.errors\n                    });\n                    return;\n                  }\n\n                  self.mutationStore.markMutationResult(mutationId);\n\n                  if (fetchPolicy !== 'no-cache') {\n                    try {\n                      markMutationResult({\n                        mutationId: mutationId,\n                        result: result,\n                        document: mutation,\n                        variables: variables,\n                        queryUpdatersById: generateUpdateQueriesInfo(),\n                        update: updateWithProxyFn\n                      }, self.cache);\n                    } catch (e) {\n                      error = new ApolloError({\n                        networkError: e\n                      });\n                      return;\n                    }\n                  }\n\n                  storeResult = result;\n                },\n                error: function (err) {\n                  self.mutationStore.markMutationError(mutationId, err);\n\n                  if (optimisticResponse) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n\n                  self.broadcastQueries();\n                  reject(new ApolloError({\n                    networkError: err\n                  }));\n                },\n                complete: function () {\n                  if (error) {\n                    self.mutationStore.markMutationError(mutationId, error);\n                  }\n\n                  if (optimisticResponse) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n\n                  self.broadcastQueries();\n\n                  if (error) {\n                    reject(error);\n                    return;\n                  }\n\n                  if (typeof refetchQueries === 'function') {\n                    refetchQueries = refetchQueries(storeResult);\n                  }\n\n                  var refetchQueryPromises = [];\n\n                  if (isNonEmptyArray(refetchQueries)) {\n                    refetchQueries.forEach(function (refetchQuery) {\n                      if (typeof refetchQuery === 'string') {\n                        self.queries.forEach(function (_a) {\n                          var observableQuery = _a.observableQuery;\n\n                          if (observableQuery && observableQuery.watching && observableQuery.queryName === refetchQuery) {\n                            refetchQueryPromises.push(observableQuery.refetch());\n                          }\n                        });\n                      } else {\n                        var queryOptions = {\n                          query: refetchQuery.query,\n                          variables: refetchQuery.variables,\n                          fetchPolicy: 'network-only'\n                        };\n\n                        if (refetchQuery.context) {\n                          queryOptions.context = refetchQuery.context;\n                        }\n\n                        refetchQueryPromises.push(self.query(queryOptions));\n                      }\n                    });\n                  }\n\n                  Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                    if (errorPolicy === 'ignore' && storeResult && graphQLResultHasError(storeResult)) {\n                      delete storeResult.errors;\n                    }\n\n                    resolve(storeResult);\n                  });\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, fetchMoreForQueryId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, fetchPolicy, _b, context, query, variables, storeResult, isNetworkOnly, needToFetch, _c, complete, result, shouldFetch, requestId, queryInfo, networkResult;\n\n      var _this = this;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? 'cache-first' : _a, _b = options.context, context = _b === void 0 ? {} : _b;\n            query = this.transform(options.query).document;\n            variables = this.getVariables(query, options.variables);\n            if (!this.transform(query).hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(query, variables, context)];\n\n          case 1:\n            variables = _d.sent();\n            _d.label = 2;\n\n          case 2:\n            options = __assign(__assign({}, options), {\n              variables: variables\n            });\n            isNetworkOnly = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n            needToFetch = isNetworkOnly;\n\n            if (!isNetworkOnly) {\n              _c = this.cache.diff({\n                query: query,\n                variables: variables,\n                returnPartialData: true,\n                optimistic: false\n              }), complete = _c.complete, result = _c.result;\n              needToFetch = !complete || fetchPolicy === 'cache-and-network';\n              storeResult = result;\n            }\n\n            shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n            if (hasDirectives(['live'], query)) shouldFetch = true;\n            requestId = this.idCounter++;\n            queryInfo = this.getQuery(queryId).init({\n              document: query,\n              variables: variables,\n              isPoll: fetchType === FetchType.poll,\n              isRefetch: fetchType === FetchType.refetch,\n              lastRequestId: requestId\n            }).updateWatch(options);\n            this.dirty(queryId);\n            this.dirty(fetchMoreForQueryId);\n            this.setNetStatus(fetchMoreForQueryId, NetworkStatus.fetchMore);\n\n            if (shouldFetch) {\n              this.broadcastQueries();\n              networkResult = this.fetchRequest({\n                requestId: requestId,\n                queryId: queryId,\n                document: query,\n                options: options,\n                fetchMoreForQueryId: fetchMoreForQueryId\n              }).catch(function (error) {\n                if (isApolloError(error)) {\n                  throw error;\n                } else {\n                  if (requestId >= _this.getQuery(queryId).lastRequestId) {\n                    queryInfo.markError(error);\n\n                    _this.setNetStatus(fetchMoreForQueryId, NetworkStatus.ready);\n\n                    _this.dirty(queryId);\n\n                    _this.dirty(fetchMoreForQueryId);\n\n                    _this.broadcastQueries();\n                  }\n\n                  throw new ApolloError({\n                    networkError: error\n                  });\n                }\n              });\n\n              if (fetchPolicy !== 'cache-and-network') {\n                return [2, networkResult];\n              }\n\n              networkResult.catch(function () {});\n            }\n\n            this.setNetStatus(queryId, shouldFetch ? queryInfo.networkStatus : NetworkStatus.ready);\n            this.dirty(queryId);\n            this.dirty(fetchMoreForQueryId);\n\n            if (this.transform(query).hasForcedResolvers) {\n              return [2, this.localState.runResolvers({\n                document: query,\n                remoteResult: {\n                  data: storeResult\n                },\n                context: context,\n                variables: variables,\n                onlyRunForcedResolvers: true\n              }).then(function (result) {\n                queryInfo.markResult(result, options, !fetchMoreForQueryId, false);\n\n                _this.broadcastQueries();\n\n                return result;\n              })];\n            }\n\n            this.broadcastQueries();\n            return [2, {\n              data: storeResult\n            }];\n        }\n      });\n    });\n  };\n\n  QueryManager.prototype.getQueryStore = function () {\n    var store = Object.create(null);\n    this.queries.forEach(function (info, queryId) {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors\n      };\n    });\n    return store;\n  };\n\n  QueryManager.prototype.getQueryStoreValue = function (queryId) {\n    return queryId ? this.queries.get(queryId) : undefined;\n  };\n\n  QueryManager.prototype.setNetStatus = function (queryId, status) {\n    var queryInfo = queryId && this.getQuery(queryId);\n\n    if (queryInfo) {\n      queryInfo.networkStatus = status;\n\n      if (status === NetworkStatus.ready) {\n        queryInfo.networkError = null;\n      }\n    }\n  };\n\n  QueryManager.prototype.queryListenerForObserver = function (queryId, observer) {\n    return function (info) {\n      var observableQuery = info.observableQuery,\n          networkStatus = info.networkStatus,\n          networkError = info.networkError,\n          graphQLErrors = info.graphQLErrors;\n      var _a = observableQuery.options,\n          fetchPolicy = _a.fetchPolicy,\n          _b = _a.errorPolicy,\n          errorPolicy = _b === void 0 ? 'none' : _b,\n          returnPartialData = _a.returnPartialData,\n          partialRefetch = _a.partialRefetch;\n      var hasGraphQLErrors = isNonEmptyArray(graphQLErrors);\n\n      if (errorPolicy === 'none' && hasGraphQLErrors || networkError) {\n        observer.error && observer.error(new ApolloError({\n          graphQLErrors: graphQLErrors,\n          networkError: networkError\n        }));\n        return;\n      }\n\n      var diff = info.getDiff();\n\n      if (diff.complete || returnPartialData || partialRefetch || hasGraphQLErrors || fetchPolicy === 'cache-only') {\n        var result = {\n          data: diff.result,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus: networkStatus\n        };\n\n        if (errorPolicy === 'all' && hasGraphQLErrors) {\n          result.errors = graphQLErrors;\n        }\n\n        observer.next && observer.next(result);\n      } else if (process.env.NODE_ENV !== 'production' && isNonEmptyArray(diff.missing) && !equal(diff.result, {})) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(\"Missing cache result fields: \" + diff.missing.map(function (m) {\n          return m.path.join('.');\n        }).join(', '), diff.missing);\n      }\n    };\n  };\n\n  QueryManager.prototype.transform = function (document) {\n    var transformCache = this.transformCache;\n\n    if (!transformCache.has(document)) {\n      var transformed = this.cache.transformDocument(document);\n      var forLink = removeConnectionDirectiveFromDocument(this.cache.transformForLink(transformed));\n      var clientQuery = this.localState.clientQuery(transformed);\n      var serverQuery = forLink && this.localState.serverQuery(forLink);\n      var cacheEntry_1 = {\n        document: transformed,\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery: clientQuery,\n        serverQuery: serverQuery,\n        defaultVars: getDefaultValues(getOperationDefinition(transformed))\n      };\n\n      var add = function (doc) {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry_1);\n        }\n      };\n\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document);\n  };\n\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.transform(document).defaultVars), variables);\n  };\n\n  QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n    if (shouldSubscribe === void 0) {\n      shouldSubscribe = true;\n    }\n\n    options = __assign(__assign({}, options), {\n      variables: this.getVariables(options.query, options.variables)\n    });\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    var observable = new ObservableQuery({\n      queryManager: this,\n      options: options,\n      shouldSubscribe: shouldSubscribe\n    });\n    this.getQuery(observable.queryId).init({\n      document: options.query,\n      observableQuery: observable,\n      variables: options.variables,\n      isPoll: false,\n      isRefetch: false\n    });\n    return observable;\n  };\n\n  QueryManager.prototype.query = function (options) {\n    var _this = this;\n\n    process.env.NODE_ENV === \"production\" ? invariant(options.query, 17) : invariant(options.query, 'query option is required. You must specify your GraphQL document ' + 'in the query option.');\n    process.env.NODE_ENV === \"production\" ? invariant(options.query.kind === 'Document', 18) : invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n    process.env.NODE_ENV === \"production\" ? invariant(!options.returnPartialData, 19) : invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n    process.env.NODE_ENV === \"production\" ? invariant(!options.pollInterval, 20) : invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n    return new Promise(function (resolve, reject) {\n      var watchedQuery = _this.watchQuery(options, false);\n\n      _this.fetchQueryRejectFns.set(\"query:\" + watchedQuery.queryId, reject);\n\n      watchedQuery.result().then(resolve, reject).then(function () {\n        return _this.fetchQueryRejectFns.delete(\"query:\" + watchedQuery.queryId);\n      });\n    });\n  };\n\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.idCounter++);\n  };\n\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n    this.stopPollingQuery(queryId);\n  };\n\n  QueryManager.prototype.addQueryListener = function (queryId, listener) {\n    this.getQuery(queryId).listeners.add(listener);\n  };\n\n  QueryManager.prototype.clearStore = function () {\n    this.fetchQueryRejectFns.forEach(function (reject) {\n      reject(process.env.NODE_ENV === \"production\" ? new InvariantError(21) : new InvariantError('Store reset while query was in flight (not completed in link chain)'));\n    });\n    this.queries.forEach(function (queryInfo, queryId) {\n      if (queryInfo.observableQuery && queryInfo.observableQuery.watching) {\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n    this.mutationStore.reset();\n    return this.cache.reset();\n  };\n\n  QueryManager.prototype.resetStore = function () {\n    var _this = this;\n\n    return this.clearStore().then(function () {\n      return _this.reFetchObservableQueries();\n    });\n  };\n\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n\n    var observableQueryPromises = [];\n    this.queries.forEach(function (_a, queryId) {\n      var observableQuery = _a.observableQuery;\n\n      if (observableQuery && observableQuery.watching) {\n        var fetchPolicy = observableQuery.options.fetchPolicy;\n        observableQuery.resetLastResults();\n\n        if (fetchPolicy !== 'cache-only' && (includeStandby || fetchPolicy !== 'standby')) {\n          observableQueryPromises.push(observableQuery.refetch());\n        }\n\n        _this.getQuery(queryId).setDiff(null);\n      }\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n\n  QueryManager.prototype.observeQuery = function (observableQuery, observer) {\n    var queryId = observableQuery.queryId,\n        options = observableQuery.options;\n    this.getQuery(queryId).observableQuery = observableQuery;\n\n    if (options.pollInterval) {\n      this.startPollingQuery(options, queryId);\n    }\n\n    this.addQueryListener(queryId, this.queryListenerForObserver(queryId, observer));\n    return this.fetchQuery(queryId, options);\n  };\n\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n\n    var query = _a.query,\n        fetchPolicy = _a.fetchPolicy,\n        variables = _a.variables;\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    var makeObservable = function (variables) {\n      return _this.getObservableFromLink(query, {}, variables, false).map(function (result) {\n        if (!fetchPolicy || fetchPolicy !== 'no-cache') {\n          if (!graphQLResultHasError(result)) {\n            _this.cache.write({\n              query: query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables\n            });\n          }\n\n          _this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors\n          });\n        }\n\n        return result;\n      });\n    };\n\n    if (this.transform(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n\n    return makeObservable(variables);\n  };\n\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n\n  QueryManager.prototype.removeQuery = function (queryId) {\n    this.fetchQueryRejectFns.delete(\"query:\" + queryId);\n    this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n    this.getQuery(queryId).subscriptions.forEach(function (x) {\n      return x.unsubscribe();\n    });\n    this.queries.delete(queryId);\n  };\n\n  QueryManager.prototype.getCurrentQueryResult = function (observableQuery, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = true;\n    }\n\n    var _a;\n\n    var _b = observableQuery.options,\n        variables = _b.variables,\n        query = _b.query,\n        fetchPolicy = _b.fetchPolicy,\n        returnPartialData = _b.returnPartialData;\n    var lastResult = observableQuery.getLastResult();\n\n    if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {\n      var diff = this.getQuery(observableQuery.queryId).getDiff();\n      return {\n        data: (_a = diff) === null || _a === void 0 ? void 0 : _a.result,\n        partial: false\n      };\n    }\n\n    var _c = this.cache.diff({\n      query: query,\n      variables: variables,\n      previousResult: lastResult ? lastResult.data : undefined,\n      returnPartialData: true,\n      optimistic: optimistic\n    }),\n        result = _c.result,\n        complete = _c.complete;\n\n    return {\n      data: complete || returnPartialData ? result : void 0,\n      partial: !complete\n    };\n  };\n\n  QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {\n    var observableQuery;\n\n    if (typeof queryIdOrObservable === 'string') {\n      var foundObservableQuery = this.getQuery(queryIdOrObservable).observableQuery;\n      process.env.NODE_ENV === \"production\" ? invariant(foundObservableQuery, 22) : invariant(foundObservableQuery, \"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n      observableQuery = foundObservableQuery;\n    } else {\n      observableQuery = queryIdOrObservable;\n    }\n\n    var _a = observableQuery.options,\n        variables = _a.variables,\n        query = _a.query;\n    return {\n      previousResult: this.getCurrentQueryResult(observableQuery, false).data,\n      variables: variables,\n      document: query\n    };\n  };\n\n  QueryManager.prototype.broadcastQueries = function () {\n    this.onBroadcast();\n    this.queries.forEach(function (info) {\n      return info.notify();\n    });\n  };\n\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n    var _this = this;\n\n    if (deduplication === void 0) {\n      deduplication = this.queryDeduplication;\n    }\n\n    var observable;\n    var serverQuery = this.transform(query).serverQuery;\n\n    if (serverQuery) {\n      var _a = this,\n          inFlightLinkObservables_1 = _a.inFlightLinkObservables,\n          link = _a.link;\n\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        }))\n      };\n      context = operation.context;\n\n      if (deduplication) {\n        var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n        inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n        var varJson_1 = JSON.stringify(variables);\n        observable = byVariables_1.get(varJson_1);\n\n        if (!observable) {\n          byVariables_1.set(varJson_1, observable = multiplex(execute(link, operation)));\n\n          var cleanup = function () {\n            byVariables_1.delete(varJson_1);\n            if (!byVariables_1.size) inFlightLinkObservables_1.delete(serverQuery);\n            cleanupSub_1.unsubscribe();\n          };\n\n          var cleanupSub_1 = observable.subscribe({\n            next: cleanup,\n            error: cleanup,\n            complete: cleanup\n          });\n        }\n      } else {\n        observable = multiplex(execute(link, operation));\n      }\n    } else {\n      observable = Observable.of({\n        data: {}\n      });\n      context = this.prepareContext(context);\n    }\n\n    var clientQuery = this.transform(query).clientQuery;\n\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n\n    return observable;\n  };\n\n  QueryManager.prototype.fetchRequest = function (_a) {\n    var _this = this;\n\n    var requestId = _a.requestId,\n        queryId = _a.queryId,\n        document = _a.document,\n        options = _a.options,\n        fetchMoreForQueryId = _a.fetchMoreForQueryId;\n    var variables = options.variables,\n        _b = options.errorPolicy,\n        errorPolicy = _b === void 0 ? 'none' : _b,\n        fetchPolicy = options.fetchPolicy;\n    var resultFromStore;\n    var errorsFromStore;\n    return new Promise(function (resolve, reject) {\n      var observable = _this.getObservableFromLink(document, options.context, variables);\n\n      var subs = _this.getQuery(queryId).subscriptions;\n\n      var fqrfId = \"fetchRequest:\" + queryId;\n\n      _this.fetchQueryRejectFns.set(fqrfId, reject);\n\n      var cleanup = function () {\n        _this.fetchQueryRejectFns.delete(fqrfId);\n\n        subs.delete(subscription);\n      };\n\n      var subscription = observable.map(function (result) {\n        var queryInfo = _this.getQuery(queryId);\n\n        if (requestId >= queryInfo.lastRequestId) {\n          queryInfo.markResult(result, options, !fetchMoreForQueryId, true);\n\n          _this.setNetStatus(fetchMoreForQueryId, NetworkStatus.ready);\n\n          _this.dirty(queryId);\n\n          _this.dirty(fetchMoreForQueryId);\n\n          _this.broadcastQueries();\n        }\n\n        if (errorPolicy === 'none' && isNonEmptyArray(result.errors)) {\n          return reject(new ApolloError({\n            graphQLErrors: result.errors\n          }));\n        }\n\n        if (errorPolicy === 'all') {\n          errorsFromStore = result.errors;\n        }\n\n        if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n          resultFromStore = result.data;\n        } else {\n          var _a = _this.cache.diff({\n            variables: variables,\n            query: document,\n            optimistic: false,\n            returnPartialData: true\n          }),\n              result_1 = _a.result,\n              complete = _a.complete;\n\n          if (complete || options.returnPartialData) {\n            resultFromStore = result_1;\n          }\n        }\n      }).subscribe({\n        error: function (error) {\n          cleanup();\n          reject(error);\n        },\n        complete: function () {\n          cleanup();\n          resolve({\n            data: resultFromStore,\n            errors: errorsFromStore,\n            loading: false,\n            networkStatus: NetworkStatus.ready\n          });\n        }\n      });\n      subs.add(subscription);\n    });\n  };\n\n  QueryManager.prototype.getQuery = function (queryId) {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this.cache));\n    }\n\n    return this.queries.get(queryId);\n  };\n\n  QueryManager.prototype.dirty = function (queryId) {\n    if (queryId) {\n      this.getQuery(queryId).setDirty();\n    }\n  };\n\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign({}, newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n\n  QueryManager.prototype.checkInFlight = function (queryId) {\n    var query = this.getQueryStoreValue(queryId);\n    return !!query && !!query.networkStatus && query.networkStatus !== NetworkStatus.ready && query.networkStatus !== NetworkStatus.error;\n  };\n\n  QueryManager.prototype.startPollingQuery = function (options, queryId) {\n    var _this = this;\n\n    var pollInterval = options.pollInterval;\n    process.env.NODE_ENV === \"production\" ? invariant(pollInterval, 23) : invariant(pollInterval, 'Attempted to start a polling query without a polling interval.');\n\n    if (!this.ssrMode) {\n      var info = this.pollingInfoByQueryId.get(queryId);\n\n      if (!info) {\n        this.pollingInfoByQueryId.set(queryId, info = {});\n      }\n\n      info.interval = pollInterval;\n      info.options = __assign(__assign({}, options), {\n        fetchPolicy: 'network-only'\n      });\n\n      var maybeFetch_1 = function () {\n        var info = _this.pollingInfoByQueryId.get(queryId);\n\n        if (info) {\n          if (_this.checkInFlight(queryId)) {\n            poll_1();\n          } else {\n            _this.fetchQuery(queryId, info.options, FetchType.poll).then(poll_1, poll_1);\n          }\n        }\n      };\n\n      var poll_1 = function () {\n        var info = _this.pollingInfoByQueryId.get(queryId);\n\n        if (info) {\n          clearTimeout(info.timeout);\n          info.timeout = setTimeout(maybeFetch_1, info.interval);\n        }\n      };\n\n      poll_1();\n    }\n\n    return queryId;\n  };\n\n  QueryManager.prototype.stopPollingQuery = function (queryId) {\n    this.pollingInfoByQueryId.delete(queryId);\n  };\n\n  return QueryManager;\n}();\n\nfunction markMutationResult(mutation, cache) {\n  if (!graphQLResultHasError(mutation.result)) {\n    var cacheWrites_1 = [{\n      result: mutation.result.data,\n      dataId: 'ROOT_MUTATION',\n      query: mutation.document,\n      variables: mutation.variables\n    }];\n    var queryUpdatersById_1 = mutation.queryUpdatersById;\n\n    if (queryUpdatersById_1) {\n      Object.keys(queryUpdatersById_1).forEach(function (id) {\n        var _a = queryUpdatersById_1[id],\n            updater = _a.updater,\n            _b = _a.queryInfo,\n            document = _b.document,\n            variables = _b.variables;\n\n        var _c = cache.diff({\n          query: document,\n          variables: variables,\n          returnPartialData: true,\n          optimistic: false\n        }),\n            currentQueryResult = _c.result,\n            complete = _c.complete;\n\n        if (complete) {\n          var nextQueryResult = tryFunctionOrLogError(function () {\n            return updater(currentQueryResult, {\n              mutationResult: mutation.result,\n              queryName: getOperationName(document) || undefined,\n              queryVariables: variables\n            });\n          });\n\n          if (nextQueryResult) {\n            cacheWrites_1.push({\n              result: nextQueryResult,\n              dataId: 'ROOT_QUERY',\n              query: document,\n              variables: variables\n            });\n          }\n        }\n      });\n    }\n\n    cache.performTransaction(function (c) {\n      cacheWrites_1.forEach(function (write) {\n        return c.write(write);\n      });\n      var update = mutation.update;\n\n      if (update) {\n        tryFunctionOrLogError(function () {\n          return update(c, mutation.result);\n        });\n      }\n    });\n  }\n}\n\nexport { QueryManager };","map":{"version":3,"sources":["QueryManager.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, InvariantError } from 'ts-invariant';\nimport equal from '@wry/equality';\nimport { execute } from '../link/core/execute';\nimport { getDefaultValues, getOperationDefinition, getOperationName, } from '../utilities/graphql/getFromAST';\nimport { hasDirectives, hasClientExports, } from '../utilities/graphql/directives';\nimport { graphQLResultHasError, tryFunctionOrLogError, } from '../utilities/common/errorHandling';\nimport { removeConnectionDirectiveFromDocument } from '../utilities/graphql/transform';\nimport { canUseWeakMap } from '../utilities/common/canUse';\nimport { isApolloError, ApolloError } from '../errors/ApolloError';\nimport { Observable, } from '../utilities/observables/Observable';\nimport { MutationStore } from '../data/mutations';\nimport { ObservableQuery } from './ObservableQuery';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport { FetchType, } from './types';\nimport { LocalState } from './LocalState';\nimport { asyncMap, multiplex } from '../utilities/observables/observables';\nimport { isNonEmptyArray } from '../utilities/common/arrays';\nimport { QueryInfo } from './QueryInfo';\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var cache = _a.cache, link = _a.link, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, _c = _a.onBroadcast, onBroadcast = _c === void 0 ? function () { return undefined; } : _c, _d = _a.ssrMode, ssrMode = _d === void 0 ? false : _d, _e = _a.clientAwareness, clientAwareness = _e === void 0 ? {} : _e, localState = _a.localState, assumeImmutableResults = _a.assumeImmutableResults;\n        this.mutationStore = new MutationStore();\n        this.clientAwareness = {};\n        this.idCounter = 1;\n        this.queries = new Map();\n        this.fetchQueryRejectFns = new Map();\n        this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n        this.inFlightLinkObservables = new Map();\n        this.pollingInfoByQueryId = new Map();\n        this.cache = cache;\n        this.link = link;\n        this.queryDeduplication = queryDeduplication;\n        this.onBroadcast = onBroadcast;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new LocalState({ cache: cache });\n        this.ssrMode = ssrMode;\n        this.assumeImmutableResults = !!assumeImmutableResults;\n    }\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.fetchQueryRejectFns.forEach(function (reject) {\n            reject(new InvariantError('QueryManager stopped while query was in flight'));\n        });\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueriesByName = _a.updateQueries, _b = _a.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a.update, _d = _a.errorPolicy, errorPolicy = _d === void 0 ? 'none' : _d, fetchPolicy = _a.fetchPolicy, _e = _a.context, context = _e === void 0 ? {} : _e;\n        return __awaiter(this, void 0, void 0, function () {\n            var mutationId, generateUpdateQueriesInfo, optimistic_1, self;\n            var _this = this;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n                        invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.\");\n                        mutationId = this.generateQueryId();\n                        mutation = this.transform(mutation).document;\n                        variables = this.getVariables(mutation, variables);\n                        if (!this.transform(mutation).hasClientExports) return [3, 2];\n                        return [4, this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        variables = _f.sent();\n                        _f.label = 2;\n                    case 2:\n                        generateUpdateQueriesInfo = function () {\n                            var ret = {};\n                            if (updateQueriesByName) {\n                                _this.queries.forEach(function (_a, queryId) {\n                                    var observableQuery = _a.observableQuery;\n                                    if (observableQuery &&\n                                        observableQuery.watching) {\n                                        var queryName = observableQuery.queryName;\n                                        if (queryName &&\n                                            hasOwnProperty.call(updateQueriesByName, queryName)) {\n                                            ret[queryId] = {\n                                                updater: updateQueriesByName[queryName],\n                                                queryInfo: _this.queries.get(queryId),\n                                            };\n                                        }\n                                    }\n                                });\n                            }\n                            return ret;\n                        };\n                        this.mutationStore.initMutation(mutationId, mutation, variables);\n                        if (optimisticResponse) {\n                            optimistic_1 = typeof optimisticResponse === 'function'\n                                ? optimisticResponse(variables)\n                                : optimisticResponse;\n                            this.cache.recordOptimisticTransaction(function (cache) {\n                                markMutationResult({\n                                    mutationId: mutationId,\n                                    result: { data: optimistic_1 },\n                                    document: mutation,\n                                    variables: variables,\n                                    queryUpdatersById: generateUpdateQueriesInfo(),\n                                    update: updateWithProxyFn,\n                                }, cache);\n                            }, mutationId);\n                        }\n                        this.broadcastQueries();\n                        self = this;\n                        return [2, new Promise(function (resolve, reject) {\n                                var storeResult;\n                                var error;\n                                self.getObservableFromLink(mutation, __assign(__assign({}, context), { optimisticResponse: optimisticResponse }), variables, false).subscribe({\n                                    next: function (result) {\n                                        if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                                            error = new ApolloError({\n                                                graphQLErrors: result.errors,\n                                            });\n                                            return;\n                                        }\n                                        self.mutationStore.markMutationResult(mutationId);\n                                        if (fetchPolicy !== 'no-cache') {\n                                            try {\n                                                markMutationResult({\n                                                    mutationId: mutationId,\n                                                    result: result,\n                                                    document: mutation,\n                                                    variables: variables,\n                                                    queryUpdatersById: generateUpdateQueriesInfo(),\n                                                    update: updateWithProxyFn,\n                                                }, self.cache);\n                                            }\n                                            catch (e) {\n                                                error = new ApolloError({\n                                                    networkError: e,\n                                                });\n                                                return;\n                                            }\n                                        }\n                                        storeResult = result;\n                                    },\n                                    error: function (err) {\n                                        self.mutationStore.markMutationError(mutationId, err);\n                                        if (optimisticResponse) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        reject(new ApolloError({\n                                            networkError: err,\n                                        }));\n                                    },\n                                    complete: function () {\n                                        if (error) {\n                                            self.mutationStore.markMutationError(mutationId, error);\n                                        }\n                                        if (optimisticResponse) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        if (error) {\n                                            reject(error);\n                                            return;\n                                        }\n                                        if (typeof refetchQueries === 'function') {\n                                            refetchQueries = refetchQueries(storeResult);\n                                        }\n                                        var refetchQueryPromises = [];\n                                        if (isNonEmptyArray(refetchQueries)) {\n                                            refetchQueries.forEach(function (refetchQuery) {\n                                                if (typeof refetchQuery === 'string') {\n                                                    self.queries.forEach(function (_a) {\n                                                        var observableQuery = _a.observableQuery;\n                                                        if (observableQuery &&\n                                                            observableQuery.watching &&\n                                                            observableQuery.queryName === refetchQuery) {\n                                                            refetchQueryPromises.push(observableQuery.refetch());\n                                                        }\n                                                    });\n                                                }\n                                                else {\n                                                    var queryOptions = {\n                                                        query: refetchQuery.query,\n                                                        variables: refetchQuery.variables,\n                                                        fetchPolicy: 'network-only',\n                                                    };\n                                                    if (refetchQuery.context) {\n                                                        queryOptions.context = refetchQuery.context;\n                                                    }\n                                                    refetchQueryPromises.push(self.query(queryOptions));\n                                                }\n                                            });\n                                        }\n                                        Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                                            if (errorPolicy === 'ignore' &&\n                                                storeResult &&\n                                                graphQLResultHasError(storeResult)) {\n                                                delete storeResult.errors;\n                                            }\n                                            resolve(storeResult);\n                                        });\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, fetchMoreForQueryId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, fetchPolicy, _b, context, query, variables, storeResult, isNetworkOnly, needToFetch, _c, complete, result, shouldFetch, requestId, queryInfo, networkResult;\n            var _this = this;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? 'cache-first' : _a, _b = options.context, context = _b === void 0 ? {} : _b;\n                        query = this.transform(options.query).document;\n                        variables = this.getVariables(query, options.variables);\n                        if (!this.transform(query).hasClientExports) return [3, 2];\n                        return [4, this.localState.addExportedVariables(query, variables, context)];\n                    case 1:\n                        variables = _d.sent();\n                        _d.label = 2;\n                    case 2:\n                        options = __assign(__assign({}, options), { variables: variables });\n                        isNetworkOnly = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n                        needToFetch = isNetworkOnly;\n                        if (!isNetworkOnly) {\n                            _c = this.cache.diff({\n                                query: query,\n                                variables: variables,\n                                returnPartialData: true,\n                                optimistic: false,\n                            }), complete = _c.complete, result = _c.result;\n                            needToFetch = !complete || fetchPolicy === 'cache-and-network';\n                            storeResult = result;\n                        }\n                        shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n                        if (hasDirectives(['live'], query))\n                            shouldFetch = true;\n                        requestId = this.idCounter++;\n                        queryInfo = this.getQuery(queryId).init({\n                            document: query,\n                            variables: variables,\n                            isPoll: fetchType === FetchType.poll,\n                            isRefetch: fetchType === FetchType.refetch,\n                            lastRequestId: requestId,\n                        }).updateWatch(options);\n                        this.dirty(queryId);\n                        this.dirty(fetchMoreForQueryId);\n                        this.setNetStatus(fetchMoreForQueryId, NetworkStatus.fetchMore);\n                        if (shouldFetch) {\n                            this.broadcastQueries();\n                            networkResult = this.fetchRequest({\n                                requestId: requestId,\n                                queryId: queryId,\n                                document: query,\n                                options: options,\n                                fetchMoreForQueryId: fetchMoreForQueryId,\n                            }).catch(function (error) {\n                                if (isApolloError(error)) {\n                                    throw error;\n                                }\n                                else {\n                                    if (requestId >= _this.getQuery(queryId).lastRequestId) {\n                                        queryInfo.markError(error);\n                                        _this.setNetStatus(fetchMoreForQueryId, NetworkStatus.ready);\n                                        _this.dirty(queryId);\n                                        _this.dirty(fetchMoreForQueryId);\n                                        _this.broadcastQueries();\n                                    }\n                                    throw new ApolloError({ networkError: error });\n                                }\n                            });\n                            if (fetchPolicy !== 'cache-and-network') {\n                                return [2, networkResult];\n                            }\n                            networkResult.catch(function () { });\n                        }\n                        this.setNetStatus(queryId, shouldFetch ? queryInfo.networkStatus : NetworkStatus.ready);\n                        this.dirty(queryId);\n                        this.dirty(fetchMoreForQueryId);\n                        if (this.transform(query).hasForcedResolvers) {\n                            return [2, this.localState.runResolvers({\n                                    document: query,\n                                    remoteResult: { data: storeResult },\n                                    context: context,\n                                    variables: variables,\n                                    onlyRunForcedResolvers: true,\n                                }).then(function (result) {\n                                    queryInfo.markResult(result, options, !fetchMoreForQueryId, false);\n                                    _this.broadcastQueries();\n                                    return result;\n                                })];\n                        }\n                        this.broadcastQueries();\n                        return [2, { data: storeResult }];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.getQueryStore = function () {\n        var store = Object.create(null);\n        this.queries.forEach(function (info, queryId) {\n            store[queryId] = {\n                variables: info.variables,\n                networkStatus: info.networkStatus,\n                networkError: info.networkError,\n                graphQLErrors: info.graphQLErrors,\n            };\n        });\n        return store;\n    };\n    QueryManager.prototype.getQueryStoreValue = function (queryId) {\n        return queryId ? this.queries.get(queryId) : undefined;\n    };\n    QueryManager.prototype.setNetStatus = function (queryId, status) {\n        var queryInfo = queryId && this.getQuery(queryId);\n        if (queryInfo) {\n            queryInfo.networkStatus = status;\n            if (status === NetworkStatus.ready) {\n                queryInfo.networkError = null;\n            }\n        }\n    };\n    QueryManager.prototype.queryListenerForObserver = function (queryId, observer) {\n        return function (info) {\n            var observableQuery = info.observableQuery, networkStatus = info.networkStatus, networkError = info.networkError, graphQLErrors = info.graphQLErrors;\n            var _a = observableQuery.options, fetchPolicy = _a.fetchPolicy, _b = _a.errorPolicy, errorPolicy = _b === void 0 ? 'none' : _b, returnPartialData = _a.returnPartialData, partialRefetch = _a.partialRefetch;\n            var hasGraphQLErrors = isNonEmptyArray(graphQLErrors);\n            if (errorPolicy === 'none' && hasGraphQLErrors || networkError) {\n                observer.error && observer.error(new ApolloError({\n                    graphQLErrors: graphQLErrors,\n                    networkError: networkError,\n                }));\n                return;\n            }\n            var diff = info.getDiff();\n            if (diff.complete ||\n                returnPartialData ||\n                partialRefetch ||\n                hasGraphQLErrors ||\n                fetchPolicy === 'cache-only') {\n                var result = {\n                    data: diff.result,\n                    loading: isNetworkRequestInFlight(networkStatus),\n                    networkStatus: networkStatus,\n                };\n                if (errorPolicy === 'all' && hasGraphQLErrors) {\n                    result.errors = graphQLErrors;\n                }\n                observer.next && observer.next(result);\n            }\n            else if (process.env.NODE_ENV !== 'production' &&\n                isNonEmptyArray(diff.missing) &&\n                !equal(diff.result, {})) {\n                invariant.warn(\"Missing cache result fields: \" + diff.missing.map(function (m) { return m.path.join('.'); }).join(', '), diff.missing);\n            }\n        };\n    };\n    QueryManager.prototype.transform = function (document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var transformed = this.cache.transformDocument(document);\n            var forLink = removeConnectionDirectiveFromDocument(this.cache.transformForLink(transformed));\n            var clientQuery = this.localState.clientQuery(transformed);\n            var serverQuery = forLink && this.localState.serverQuery(forLink);\n            var cacheEntry_1 = {\n                document: transformed,\n                hasClientExports: hasClientExports(transformed),\n                hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n                clientQuery: clientQuery,\n                serverQuery: serverQuery,\n                defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n            };\n            var add = function (doc) {\n                if (doc && !transformCache.has(doc)) {\n                    transformCache.set(doc, cacheEntry_1);\n                }\n            };\n            add(document);\n            add(transformed);\n            add(clientQuery);\n            add(serverQuery);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function (document, variables) {\n        return __assign(__assign({}, this.transform(document).defaultVars), variables);\n    };\n    QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n        if (shouldSubscribe === void 0) { shouldSubscribe = true; }\n        options = __assign(__assign({}, options), { variables: this.getVariables(options.query, options.variables) });\n        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var observable = new ObservableQuery({\n            queryManager: this,\n            options: options,\n            shouldSubscribe: shouldSubscribe,\n        });\n        this.getQuery(observable.queryId).init({\n            document: options.query,\n            observableQuery: observable,\n            variables: options.variables,\n            isPoll: false,\n            isRefetch: false,\n        });\n        return observable;\n    };\n    QueryManager.prototype.query = function (options) {\n        var _this = this;\n        invariant(options.query, 'query option is required. You must specify your GraphQL document ' +\n            'in the query option.');\n        invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n        invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n        invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n        return new Promise(function (resolve, reject) {\n            var watchedQuery = _this.watchQuery(options, false);\n            _this.fetchQueryRejectFns.set(\"query:\" + watchedQuery.queryId, reject);\n            watchedQuery\n                .result()\n                .then(resolve, reject)\n                .then(function () {\n                return _this.fetchQueryRejectFns.delete(\"query:\" + watchedQuery.queryId);\n            });\n        });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        return String(this.idCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo)\n            queryInfo.stop();\n        this.stopPollingQuery(queryId);\n    };\n    QueryManager.prototype.addQueryListener = function (queryId, listener) {\n        this.getQuery(queryId).listeners.add(listener);\n    };\n    QueryManager.prototype.clearStore = function () {\n        this.fetchQueryRejectFns.forEach(function (reject) {\n            reject(new InvariantError('Store reset while query was in flight (not completed in link chain)'));\n        });\n        this.queries.forEach(function (queryInfo, queryId) {\n            if (queryInfo.observableQuery &&\n                queryInfo.observableQuery.watching) {\n                queryInfo.networkStatus = NetworkStatus.loading;\n            }\n            else {\n                queryInfo.stop();\n            }\n        });\n        this.mutationStore.reset();\n        return this.cache.reset();\n    };\n    QueryManager.prototype.resetStore = function () {\n        var _this = this;\n        return this.clearStore().then(function () {\n            return _this.reFetchObservableQueries();\n        });\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) { includeStandby = false; }\n        var observableQueryPromises = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (observableQuery &&\n                observableQuery.watching) {\n                var fetchPolicy = observableQuery.options.fetchPolicy;\n                observableQuery.resetLastResults();\n                if (fetchPolicy !== 'cache-only' &&\n                    (includeStandby || fetchPolicy !== 'standby')) {\n                    observableQueryPromises.push(observableQuery.refetch());\n                }\n                _this.getQuery(queryId).setDiff(null);\n            }\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.observeQuery = function (observableQuery, observer) {\n        var queryId = observableQuery.queryId, options = observableQuery.options;\n        this.getQuery(queryId).observableQuery = observableQuery;\n        if (options.pollInterval) {\n            this.startPollingQuery(options, queryId);\n        }\n        this.addQueryListener(queryId, this.queryListenerForObserver(queryId, observer));\n        return this.fetchQuery(queryId, options);\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, variables = _a.variables;\n        query = this.transform(query).document;\n        variables = this.getVariables(query, variables);\n        var makeObservable = function (variables) {\n            return _this.getObservableFromLink(query, {}, variables, false).map(function (result) {\n                if (!fetchPolicy || fetchPolicy !== 'no-cache') {\n                    if (!graphQLResultHasError(result)) {\n                        _this.cache.write({\n                            query: query,\n                            result: result.data,\n                            dataId: 'ROOT_SUBSCRIPTION',\n                            variables: variables,\n                        });\n                    }\n                    _this.broadcastQueries();\n                }\n                if (graphQLResultHasError(result)) {\n                    throw new ApolloError({\n                        graphQLErrors: result.errors,\n                    });\n                }\n                return result;\n            });\n        };\n        if (this.transform(query).hasClientExports) {\n            var observablePromise_1 = this.localState.addExportedVariables(query, variables).then(makeObservable);\n            return new Observable(function (observer) {\n                var sub = null;\n                observablePromise_1.then(function (observable) { return sub = observable.subscribe(observer); }, observer.error);\n                return function () { return sub && sub.unsubscribe(); };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        this.fetchQueryRejectFns.delete(\"query:\" + queryId);\n        this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n        this.getQuery(queryId).subscriptions.forEach(function (x) { return x.unsubscribe(); });\n        this.queries.delete(queryId);\n    };\n    QueryManager.prototype.getCurrentQueryResult = function (observableQuery, optimistic) {\n        if (optimistic === void 0) { optimistic = true; }\n        var _a;\n        var _b = observableQuery.options, variables = _b.variables, query = _b.query, fetchPolicy = _b.fetchPolicy, returnPartialData = _b.returnPartialData;\n        var lastResult = observableQuery.getLastResult();\n        if (fetchPolicy === 'no-cache' ||\n            fetchPolicy === 'network-only') {\n            var diff = this.getQuery(observableQuery.queryId).getDiff();\n            return { data: (_a = diff) === null || _a === void 0 ? void 0 : _a.result, partial: false };\n        }\n        var _c = this.cache.diff({\n            query: query,\n            variables: variables,\n            previousResult: lastResult ? lastResult.data : undefined,\n            returnPartialData: true,\n            optimistic: optimistic,\n        }), result = _c.result, complete = _c.complete;\n        return {\n            data: (complete || returnPartialData) ? result : void 0,\n            partial: !complete,\n        };\n    };\n    QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {\n        var observableQuery;\n        if (typeof queryIdOrObservable === 'string') {\n            var foundObservableQuery = this.getQuery(queryIdOrObservable).observableQuery;\n            invariant(foundObservableQuery, \"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n            observableQuery = foundObservableQuery;\n        }\n        else {\n            observableQuery = queryIdOrObservable;\n        }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query;\n        return {\n            previousResult: this.getCurrentQueryResult(observableQuery, false).data,\n            variables: variables,\n            document: query,\n        };\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        this.onBroadcast();\n        this.queries.forEach(function (info) { return info.notify(); });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n        var _this = this;\n        if (deduplication === void 0) { deduplication = this.queryDeduplication; }\n        var observable;\n        var serverQuery = this.transform(query).serverQuery;\n        if (serverQuery) {\n            var _a = this, inFlightLinkObservables_1 = _a.inFlightLinkObservables, link = _a.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: getOperationName(serverQuery) || void 0,\n                context: this.prepareContext(__assign(__assign({}, context), { forceFetch: !deduplication })),\n            };\n            context = operation.context;\n            if (deduplication) {\n                var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n                inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n                var varJson_1 = JSON.stringify(variables);\n                observable = byVariables_1.get(varJson_1);\n                if (!observable) {\n                    byVariables_1.set(varJson_1, observable = multiplex(execute(link, operation)));\n                    var cleanup = function () {\n                        byVariables_1.delete(varJson_1);\n                        if (!byVariables_1.size)\n                            inFlightLinkObservables_1.delete(serverQuery);\n                        cleanupSub_1.unsubscribe();\n                    };\n                    var cleanupSub_1 = observable.subscribe({\n                        next: cleanup,\n                        error: cleanup,\n                        complete: cleanup,\n                    });\n                }\n            }\n            else {\n                observable = multiplex(execute(link, operation));\n            }\n        }\n        else {\n            observable = Observable.of({ data: {} });\n            context = this.prepareContext(context);\n        }\n        var clientQuery = this.transform(query).clientQuery;\n        if (clientQuery) {\n            observable = asyncMap(observable, function (result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables,\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.fetchRequest = function (_a) {\n        var _this = this;\n        var requestId = _a.requestId, queryId = _a.queryId, document = _a.document, options = _a.options, fetchMoreForQueryId = _a.fetchMoreForQueryId;\n        var variables = options.variables, _b = options.errorPolicy, errorPolicy = _b === void 0 ? 'none' : _b, fetchPolicy = options.fetchPolicy;\n        var resultFromStore;\n        var errorsFromStore;\n        return new Promise(function (resolve, reject) {\n            var observable = _this.getObservableFromLink(document, options.context, variables);\n            var subs = _this.getQuery(queryId).subscriptions;\n            var fqrfId = \"fetchRequest:\" + queryId;\n            _this.fetchQueryRejectFns.set(fqrfId, reject);\n            var cleanup = function () {\n                _this.fetchQueryRejectFns.delete(fqrfId);\n                subs.delete(subscription);\n            };\n            var subscription = observable.map(function (result) {\n                var queryInfo = _this.getQuery(queryId);\n                if (requestId >= queryInfo.lastRequestId) {\n                    queryInfo.markResult(result, options, !fetchMoreForQueryId, true);\n                    _this.setNetStatus(fetchMoreForQueryId, NetworkStatus.ready);\n                    _this.dirty(queryId);\n                    _this.dirty(fetchMoreForQueryId);\n                    _this.broadcastQueries();\n                }\n                if (errorPolicy === 'none' && isNonEmptyArray(result.errors)) {\n                    return reject(new ApolloError({\n                        graphQLErrors: result.errors,\n                    }));\n                }\n                if (errorPolicy === 'all') {\n                    errorsFromStore = result.errors;\n                }\n                if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n                    resultFromStore = result.data;\n                }\n                else {\n                    var _a = _this.cache.diff({\n                        variables: variables,\n                        query: document,\n                        optimistic: false,\n                        returnPartialData: true,\n                    }), result_1 = _a.result, complete = _a.complete;\n                    if (complete || options.returnPartialData) {\n                        resultFromStore = result_1;\n                    }\n                }\n            }).subscribe({\n                error: function (error) {\n                    cleanup();\n                    reject(error);\n                },\n                complete: function () {\n                    cleanup();\n                    resolve({\n                        data: resultFromStore,\n                        errors: errorsFromStore,\n                        loading: false,\n                        networkStatus: NetworkStatus.ready,\n                    });\n                },\n            });\n            subs.add(subscription);\n        });\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        if (queryId && !this.queries.has(queryId)) {\n            this.queries.set(queryId, new QueryInfo(this.cache));\n        }\n        return this.queries.get(queryId);\n    };\n    QueryManager.prototype.dirty = function (queryId) {\n        if (queryId) {\n            this.getQuery(queryId).setDirty();\n        }\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return __assign(__assign({}, newContext), { clientAwareness: this.clientAwareness });\n    };\n    QueryManager.prototype.checkInFlight = function (queryId) {\n        var query = this.getQueryStoreValue(queryId);\n        return (!!query &&\n            !!query.networkStatus &&\n            query.networkStatus !== NetworkStatus.ready &&\n            query.networkStatus !== NetworkStatus.error);\n    };\n    QueryManager.prototype.startPollingQuery = function (options, queryId) {\n        var _this = this;\n        var pollInterval = options.pollInterval;\n        invariant(pollInterval, 'Attempted to start a polling query without a polling interval.');\n        if (!this.ssrMode) {\n            var info = this.pollingInfoByQueryId.get(queryId);\n            if (!info) {\n                this.pollingInfoByQueryId.set(queryId, (info = {}));\n            }\n            info.interval = pollInterval;\n            info.options = __assign(__assign({}, options), { fetchPolicy: 'network-only' });\n            var maybeFetch_1 = function () {\n                var info = _this.pollingInfoByQueryId.get(queryId);\n                if (info) {\n                    if (_this.checkInFlight(queryId)) {\n                        poll_1();\n                    }\n                    else {\n                        _this.fetchQuery(queryId, info.options, FetchType.poll).then(poll_1, poll_1);\n                    }\n                }\n            };\n            var poll_1 = function () {\n                var info = _this.pollingInfoByQueryId.get(queryId);\n                if (info) {\n                    clearTimeout(info.timeout);\n                    info.timeout = setTimeout(maybeFetch_1, info.interval);\n                }\n            };\n            poll_1();\n        }\n        return queryId;\n    };\n    QueryManager.prototype.stopPollingQuery = function (queryId) {\n        this.pollingInfoByQueryId.delete(queryId);\n    };\n    return QueryManager;\n}());\nexport { QueryManager };\nfunction markMutationResult(mutation, cache) {\n    if (!graphQLResultHasError(mutation.result)) {\n        var cacheWrites_1 = [{\n                result: mutation.result.data,\n                dataId: 'ROOT_MUTATION',\n                query: mutation.document,\n                variables: mutation.variables,\n            }];\n        var queryUpdatersById_1 = mutation.queryUpdatersById;\n        if (queryUpdatersById_1) {\n            Object.keys(queryUpdatersById_1).forEach(function (id) {\n                var _a = queryUpdatersById_1[id], updater = _a.updater, _b = _a.queryInfo, document = _b.document, variables = _b.variables;\n                var _c = cache.diff({\n                    query: document,\n                    variables: variables,\n                    returnPartialData: true,\n                    optimistic: false,\n                }), currentQueryResult = _c.result, complete = _c.complete;\n                if (complete) {\n                    var nextQueryResult = tryFunctionOrLogError(function () { return updater(currentQueryResult, {\n                        mutationResult: mutation.result,\n                        queryName: getOperationName(document) || undefined,\n                        queryVariables: variables,\n                    }); });\n                    if (nextQueryResult) {\n                        cacheWrites_1.push({\n                            result: nextQueryResult,\n                            dataId: 'ROOT_QUERY',\n                            query: document,\n                            variables: variables,\n                        });\n                    }\n                }\n            });\n        }\n        cache.performTransaction(function (c) {\n            cacheWrites_1.forEach(function (write) { return c.write(write); });\n            var update = mutation.update;\n            if (update) {\n                tryFunctionOrLogError(function () { return update(c, mutation.result); });\n            }\n        });\n    }\n}\n//# sourceMappingURL=QueryManager.js.map"]},"metadata":{},"sourceType":"module"}