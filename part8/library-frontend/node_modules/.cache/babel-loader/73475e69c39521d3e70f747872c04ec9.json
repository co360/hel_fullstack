{"ast":null,"code":"import { gql } from '@apollo/client';\nconst BOOK_DETAILS = gql`\nfragment BookDetails on Book {\n  title\n  author{\n    name\n    born\n    id\n  }\n  published\n  id\n  genres\n}\n`;\nexport const ALL_AUTHORS = gql`\n  query {\n    allAuthors  {\n      name\n      born\n      bookCount\n      id\n    }\n  }\n`;\nexport const ALL_BOOKS = gql`\n  query {\n      allBooks {\n          title\n          author {\n            name\n            born\n            bookCount\n          }\n          published\n          genres\n      }\n\n  }\n`;\nexport const ADD_BOOK = gql`\n  mutation addBook($title: String!, $published: Int!, $author: String!,  $genres: [String!]!) {\n    addBook(\n      title: $title,\n      published: $published,\n      author: $author,\n      genres: $genres\n    ) {\n      title\n      published\n      author {\n        name\n        born\n        bookCount\n      }\n      genres\n    }\n  }\n`;\nexport const EDIT_AUTHOR = gql`\n  mutation editAuthor($name: String!, $born: Int!) {\n    editAuthor(name: $name, setBornTo: $born)  {\n      name\n      born\n      bookCount\n      id\n  }\n}\n`;\nexport const LOGIN = gql`\n  mutation login($username: String!, $password: String!) {\n    login(username: $username, password: $password)  {\n      value\n    }\n  }\n`;\nexport const CREATE_USER = gql`\n  mutation createUser($username: String!, $favouriteGenre: String) {\n    createUser(username: $username, favouriteGenre: $favoriteGenre) {\n      username\n      favouriteGenre\n    }\n  }\n`;\nexport const BOOK_ADDED = gql`\n  subscription {\n    bookAdded {\n      ...BookDetails\n    }\n  }\n  \n${BOOK_DETAILS}\n`;","map":{"version":3,"sources":["/Users/jaakkogummerus/Desktop/hel-fullstack/part8/library-frontend/src/queries.js"],"names":["gql","BOOK_DETAILS","ALL_AUTHORS","ALL_BOOKS","ADD_BOOK","EDIT_AUTHOR","LOGIN","CREATE_USER","BOOK_ADDED"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AAEA,MAAMC,YAAY,GAAGD,GAAI;;;;;;;;;;;;CAAzB;AAcA,OAAO,MAAME,WAAW,GAAGF,GAAI;;;;;;;;;CAAxB;AAWP,OAAO,MAAMG,SAAS,GAAGH,GAAI;;;;;;;;;;;;;;CAAtB;AAgBP,OAAO,MAAMI,QAAQ,GAAGJ,GAAI;;;;;;;;;;;;;;;;;;CAArB;AAoBP,OAAO,MAAMK,WAAW,GAAGL,GAAI;;;;;;;;;CAAxB;AAWP,OAAO,MAAMM,KAAK,GAAGN,GAAI;;;;;;CAAlB;AAQP,OAAO,MAAMO,WAAW,GAAGP,GAAI;;;;;;;CAAxB;AASP,OAAO,MAAMQ,UAAU,GAAGR,GAAI;;;;;;;EAO5BC,YAAa;CAPR","sourcesContent":["import { gql } from '@apollo/client'\n\nconst BOOK_DETAILS = gql`\nfragment BookDetails on Book {\n  title\n  author{\n    name\n    born\n    id\n  }\n  published\n  id\n  genres\n}\n`\n\nexport const ALL_AUTHORS = gql`\n  query {\n    allAuthors  {\n      name\n      born\n      bookCount\n      id\n    }\n  }\n`\n\nexport const ALL_BOOKS = gql`\n  query {\n      allBooks {\n          title\n          author {\n            name\n            born\n            bookCount\n          }\n          published\n          genres\n      }\n\n  }\n`\n\nexport const ADD_BOOK = gql`\n  mutation addBook($title: String!, $published: Int!, $author: String!,  $genres: [String!]!) {\n    addBook(\n      title: $title,\n      published: $published,\n      author: $author,\n      genres: $genres\n    ) {\n      title\n      published\n      author {\n        name\n        born\n        bookCount\n      }\n      genres\n    }\n  }\n`\n\nexport const EDIT_AUTHOR = gql`\n  mutation editAuthor($name: String!, $born: Int!) {\n    editAuthor(name: $name, setBornTo: $born)  {\n      name\n      born\n      bookCount\n      id\n  }\n}\n`\n\nexport const LOGIN = gql`\n  mutation login($username: String!, $password: String!) {\n    login(username: $username, password: $password)  {\n      value\n    }\n  }\n`\n\nexport const CREATE_USER = gql`\n  mutation createUser($username: String!, $favouriteGenre: String) {\n    createUser(username: $username, favouriteGenre: $favoriteGenre) {\n      username\n      favouriteGenre\n    }\n  }\n`\n\nexport const BOOK_ADDED = gql`\n  subscription {\n    bookAdded {\n      ...BookDetails\n    }\n  }\n  \n${BOOK_DETAILS}\n`\n"]},"metadata":{},"sourceType":"module"}