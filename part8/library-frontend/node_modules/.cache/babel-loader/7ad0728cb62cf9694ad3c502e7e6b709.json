{"ast":null,"code":"var _jsxFileName = \"/Users/jaakkogummerus/Desktop/hel-fullstack/part8/library-frontend/src/components/Books.js\";\nimport React from 'react';\nimport { useSubscription, useApolloClient } from '@apollo/client';\nimport { BOOK_ADDED, ALL_BOOKS } from '../queries';\n\nconst Books = ({\n  show,\n  books\n}) => {\n  const client = useApolloClient();\n  console.log('books', books);\n  const book = books.allBooks;\n  console.log('books data', book);\n\n  const updateCacheWith = addedPerson => {\n    const includedIn = (set, object) => set.map(p => p.id).includes(object.id);\n\n    const dataInStore = client.readQuery({\n      query: ALL_BOOKS\n    });\n\n    if (!includedIn(dataInStore.allPersons, addedPerson)) {\n      client.writeQuery({\n        query: ALL_BOOKS,\n        data: {\n          allPersons: dataInStore.allPersons.concat(addedPerson)\n        }\n      });\n    }\n  };\n\n  useSubscription(BOOK_ADDED, {\n    onSubscriptionData: ({\n      subscriptionData\n    }) => {\n      const addedBook = subscriptionData.data.addBook;\n      window.alert(`${addedBook.title} added`);\n      updateCacheWith(addedBook);\n    }\n  });\n\n  if (!show) {\n    return null;\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"books\"), React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"author\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"published\")), book.map(a => React.createElement(\"tr\", {\n    key: a.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, a.title), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, a.author.name), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, a.published))))));\n};\n\nexport default Books;","map":{"version":3,"sources":["/Users/jaakkogummerus/Desktop/hel-fullstack/part8/library-frontend/src/components/Books.js"],"names":["React","useSubscription","useApolloClient","BOOK_ADDED","ALL_BOOKS","Books","show","books","client","console","log","book","allBooks","updateCacheWith","addedPerson","includedIn","set","object","map","p","id","includes","dataInStore","readQuery","query","allPersons","writeQuery","data","concat","onSubscriptionData","subscriptionData","addedBook","addBook","window","alert","title","a","author","name","published"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,gBAAjD;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,YAAtC;;AAEA,MAAMC,KAAK,GAAG,CAAE;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAF,KAAuB;AAEnC,QAAMC,MAAM,GAAGN,eAAe,EAA9B;AAEAO,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,KAArB;AACA,QAAMI,IAAI,GAAGJ,KAAK,CAACK,QAAnB;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BC,IAA1B;;AAEA,QAAME,eAAe,GAAIC,WAAD,IAAiB;AACvC,UAAMC,UAAU,GAAG,CAACC,GAAD,EAAMC,MAAN,KACjBD,GAAG,CAACE,GAAJ,CAAQC,CAAC,IAAIA,CAAC,CAACC,EAAf,EAAmBC,QAAnB,CAA4BJ,MAAM,CAACG,EAAnC,CADF;;AAGA,UAAME,WAAW,GAAGd,MAAM,CAACe,SAAP,CAAiB;AAAEC,MAAAA,KAAK,EAAEpB;AAAT,KAAjB,CAApB;;AACA,QAAI,CAACW,UAAU,CAACO,WAAW,CAACG,UAAb,EAAyBX,WAAzB,CAAf,EAAsD;AACpDN,MAAAA,MAAM,CAACkB,UAAP,CAAkB;AAChBF,QAAAA,KAAK,EAAEpB,SADS;AAEhBuB,QAAAA,IAAI,EAAE;AAAEF,UAAAA,UAAU,EAAGH,WAAW,CAACG,UAAZ,CAAuBG,MAAvB,CAA8Bd,WAA9B;AAAf;AAFU,OAAlB;AAID;AACF,GAXD;;AAaAb,EAAAA,eAAe,CAACE,UAAD,EAAa;AAC1B0B,IAAAA,kBAAkB,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAA0B;AAC5C,YAAMC,SAAS,GAAGD,gBAAgB,CAACH,IAAjB,CAAsBK,OAAxC;AACAC,MAAAA,MAAM,CAACC,KAAP,CAAc,GAAEH,SAAS,CAACI,KAAM,QAAhC;AACAtB,MAAAA,eAAe,CAACkB,SAAD,CAAf;AACD;AALyB,GAAb,CAAf;;AAQA,MAAI,CAACzB,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALF,CADF,EAUGK,IAAI,CAACO,GAAL,CAASkB,CAAC,IACT;AAAI,IAAA,GAAG,EAAEA,CAAC,CAACD,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKC,CAAC,CAACD,KAAP,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKC,CAAC,CAACC,MAAF,CAASC,IAAd,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKF,CAAC,CAACG,SAAP,CAHF,CADD,CAVH,CADF,CAHF,CADF;AA0BD,CA3DD;;AA6DA,eAAelC,KAAf","sourcesContent":["import React from 'react'\nimport { useSubscription, useApolloClient } from '@apollo/client'\nimport { BOOK_ADDED, ALL_BOOKS } from '../queries'\n\nconst Books = ( { show, books } ) => {\n\n  const client = useApolloClient()\n\n  console.log('books', books)\n  const book = books.allBooks\n  console.log('books data', book)\n\n  const updateCacheWith = (addedPerson) => {\n    const includedIn = (set, object) => \n      set.map(p => p.id).includes(object.id)  \n\n    const dataInStore = client.readQuery({ query: ALL_BOOKS })\n    if (!includedIn(dataInStore.allPersons, addedPerson)) {\n      client.writeQuery({\n        query: ALL_BOOKS,\n        data: { allPersons : dataInStore.allPersons.concat(addedPerson) }\n      })\n    }   \n  }\n\n  useSubscription(BOOK_ADDED, {\n    onSubscriptionData: ({ subscriptionData }) => {\n      const addedBook = subscriptionData.data.addBook\n      window.alert(`${addedBook.title} added`)\n      updateCacheWith(addedBook)\n    }\n  })\n\n  if (!show) {\n    return null\n  }\n\n  return (\n    <div>\n      <h2>books</h2>\n\n      <table>\n        <tbody>\n          <tr>\n            <th></th>\n            <th>\n              author\n            </th>\n            <th>\n              published\n            </th>\n          </tr>\n          {book.map(a =>\n            <tr key={a.title}>\n              <td>{a.title}</td>\n              <td>{a.author.name}</td>\n              <td>{a.published}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Books"]},"metadata":{},"sourceType":"module"}