{"ast":null,"code":"var _jsxFileName = \"/Users/jaakkogummerus/Desktop/hel-fullstack/part8/library-frontend/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { setContext } from 'apollo-link-context';\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/link-ws';\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = localStorage.getItem('library-user-token');\n  return {\n    headers: { ...headers,\n      authorization: token ? `bearer ${token}` : null\n    }\n  };\n});\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:4000'\n});\nconst wsLink = new WebSocketLink({\n  uri: `//localhost:4000/graphql`,\n  options: {\n    reconnect: true\n  }\n});\nconst splitLink = split(({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n}, wsLink, authLink.concat(httpLink));\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink\n});\nReactDOM.render(React.createElement(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49\n  },\n  __self: this\n})), document.getElementById('root'));","map":{"version":3,"sources":["/Users/jaakkogummerus/Desktop/hel-fullstack/part8/library-frontend/src/index.js"],"names":["React","ReactDOM","App","setContext","ApolloClient","ApolloProvider","HttpLink","InMemoryCache","split","getMainDefinition","WebSocketLink","authLink","_","headers","token","localStorage","getItem","authorization","httpLink","uri","wsLink","options","reconnect","splitLink","query","definition","kind","operation","concat","client","cache","link","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEA,SAASC,UAAT,QAA2B,qBAA3B;AAEA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,QAAvC,EAAiDC,aAAjD,EAAgEC,KAAhE,QAA6E,gBAA7E;AAEA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,MAAMC,QAAQ,GAAGR,UAAU,CAAC,CAACS,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,oBAArB,CAAd;AACA,SAAO;AACLH,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPI,MAAAA,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFpC;AADJ,GAAP;AAMD,CAR0B,CAA3B;AAUA,MAAMI,QAAQ,GAAG,IAAIZ,QAAJ,CAAa;AAAEa,EAAAA,GAAG,EAAE;AAAP,CAAb,CAAjB;AAEA,MAAMC,MAAM,GAAG,IAAIV,aAAJ,CAAkB;AAC/BS,EAAAA,GAAG,EAAG,0BADyB;AAE/BE,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE;AADJ;AAFsB,CAAlB,CAAf;AAMA,MAAMC,SAAS,GAAGf,KAAK,CACrB,CAAC;AAAEgB,EAAAA;AAAF,CAAD,KAAe;AACb,QAAMC,UAAU,GAAGhB,iBAAiB,CAACe,KAAD,CAApC;AACA,SACEC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF3B;AAID,CAPoB,EAQrBP,MARqB,EASrBT,QAAQ,CAACiB,MAAT,CAAgBV,QAAhB,CATqB,CAAvB;AAYA,MAAMW,MAAM,GAAG,IAAIzB,YAAJ,CAAiB;AAC9B0B,EAAAA,KAAK,EAAE,IAAIvB,aAAJ,EADuB;AAE9BwB,EAAAA,IAAI,EAAER;AAFwB,CAAjB,CAAf;AAKAtB,QAAQ,CAAC+B,MAAT,CACE,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEH,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAIEI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport { setContext } from 'apollo-link-context'\n\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, split } from '@apollo/client'\n\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { WebSocketLink } from '@apollo/link-ws'\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('library-user-token')\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\nconst httpLink = new HttpLink({ uri: 'http://localhost:4000' })\n\nconst wsLink = new WebSocketLink({\n  uri: `//localhost:4000/graphql`,\n  options: {\n    reconnect: true\n  }\n})\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  authLink.concat(httpLink),\n)\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n, document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}