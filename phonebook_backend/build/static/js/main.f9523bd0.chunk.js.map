{"version":3,"sources":["services/personService.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","delete","put","Name","person","deletePerson","name","number","onClick","Filter","handleFilter","searchPerson","placeholder","value","onChange","Persons","searchResults","map","i","key","PersonForm","submitForm","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","App","useState","persons","setPersons","setNewName","setNewNumber","setSearchPerson","setSearchResults","errorMessage","setErrorMessage","useEffect","personService","then","response","console","log","data","Notification","message","className","React","results","filter","toLowerCase","includes","event","target","preventDefault","numbers","some","x","window","confirm","personToChange","find","setTimeout","newPerson","concat","catch","error","erasingPerson","n","alert","location","href","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f9523bd0.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => axios.get(baseUrl)\n\nconst create = newObject => axios.post(baseUrl, newObject)\n\nconst erase = (id) => axios.delete(`${baseUrl}/${id}`)\n\nconst replace = (id, newObject) => axios.put(`${baseUrl}/${id}`, newObject)\n\nexport default { getAll, create, erase, replace }","import React, { useState, useEffect } from 'react'\nimport personService from './services/personService'\n\nconst Name = ({ person, deletePerson, id }) => {\n  return (\n    <p>{person.name} {person.number} <button onClick={deletePerson}>delete</button></p>\n  )\n}\n\nconst Filter = ({ handleFilter, searchPerson }) => {\n  return (\n    <div>\n      <form>\n        <div>\n          Search for person: \n          <input placeholder='Search'\n                  value={searchPerson}\n                 onChange={handleFilter}>\n\n          </input>\n        </div>\n      </form>\n    </div>\n  )\n}\n\n\nconst Persons = ({ searchResults, deletePerson }) => {\n  return (\n  <div>\n    {searchResults.map((person, i) => <Name key={i} person={person} deletePerson={() => deletePerson(person.id)} />)}\n  </div>)\n}\n\n\nconst PersonForm = ({ submitForm, newName, handleNameChange, newNumber, handleNumberChange }) => {\n  return (\n  <div>\n    <form onSubmit={submitForm}>\n        <div>\n          Name: <input \n          value={newName} \n          onChange={handleNameChange} />\n          <br></br>\n          Number: <input \n          value={newNumber} \n          onChange={handleNumberChange} />\n          <br></br>\n        <button type=\"submit\">Add</button>\n        </div>\n        <div>\n        </div>\n      </form>\n  </div>\n  )\n}\n\nconst App = () => {\n  \n  const [persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [searchPerson, setSearchPerson] = useState('')\n  const [searchResults, setSearchResults] = useState([])\n  const [errorMessage, setErrorMessage] = useState(null)\n\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => {\n        console.log('useEffect',response)\n        setPersons(response.data)\n      })\n  }, [])\n\n  const submitForm = (event) => {\n    event.preventDefault()\n    personService\n    .getAll()\n    .then(response => {\n      const numbers = [...response.data]\n      console.log(\"here is person data\",numbers)\n      if (numbers.some((x) => x.name === newName)) {\n        if (window.confirm(`${newName} is already added to phonebook. Want to replace old number with new one?`)) {\n          const personToChange = numbers.find(name => name.name === newName).id\n          const newPhone = {\n            name: newName,\n            number: newNumber\n          }\n          personService\n          .replace(personToChange, newPhone)\n          .then(() => {\n            setNewName('')\n            setNewNumber('')\n            personService\n            .getAll()\n            .then(response => {\n              setPersons(persons)\n            })\n            setErrorMessage(`${newName}Â´s number was changed.`)\n            setTimeout(()  => {\n            setErrorMessage(null)\n        }, 3000)\n          })\n        }\n      } else {\n        const newPerson = {\n          name: newName,\n          number: newNumber\n        }\n        personService\n        .create(newPerson)\n        .then(response => {\n          setNewName('')\n          setNewNumber('')\n          setPersons(numbers.concat(newPerson))\n        })\n        .catch(error => {\n          console.log(error.response.data)\n          setErrorMessage(`${error.response.data.error}`)\n        })\n        setErrorMessage(`${newPerson.name} was added to phonebook.`)\n        setTimeout(()  => {\n        setErrorMessage(null)\n        }, 3000)\n      }\n    })\n  }\n\n  const Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\n\n  const deletePerson = (id) => {\n    const erasingPerson = persons.find(n => n.id === id)\n    alert(`Deleting ${erasingPerson.name}`, window.location.href = '')\n    personService\n    .erase(id)\n    .then(response => {\n      setPersons(persons.filter(person => person.id !== response))\n    })\n    \n    setErrorMessage(`${erasingPerson.name} was deleted`)\n    setTimeout(()  => {\n    setErrorMessage(null)\n    }, 3000)\n    \n  }\n\n\n\n\n  React.useEffect(() => {\n    const results = persons.filter(\n      person => person.name.toLowerCase().includes(searchPerson)\n    );\n    setSearchResults(results);\n  }, [persons, searchPerson])\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleFilter = (event) => {\n    console.log(handleFilter)\n    setSearchPerson(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification message={errorMessage}/>\n      <Filter handleFilter={handleFilter} searchPerson={searchPerson}/>\n      <h3>Add new person</h3>\n      <PersonForm handleNameChange={handleNameChange} \n                  handleNumberChange={handleNumberChange} \n                  newName={newName}\n                  newNumber={newNumber}\n                  submitForm={submitForm} />\n      <h2>Numbers</h2>\n      <Persons persons={persons} searchResults={searchResults} deletePerson={deletePerson} />\n    </div>\n  )\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}